name: Trunk CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [created]

jobs:
  initialize:
    name: Initialize
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Print all github context
        run: echo "$ALL_GITHUB_CONTEXT"
        env:
          ALL_GITHUB_CONTEXT: ${{ toJson(github) }}
      - name: Cancel Previous Runs
        if: ${{ github.ref != 'refs/heads/main' }}
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}
      - id: files
        uses: tj-actions/changed-files@v45.0.0
      - name: List files modified
        id: project_list
        shell: bash
        run: |
          echo ${{ steps.files.outputs.all_changed_files }} | sed -E 's/ /\n/g' > modified_files.txt
          echo "## Modified Files"
          cat modified_files.txt
          cat modified_files.txt | ./scripts/parse_file_list_for_projects.sh > project_list.txt
        env:
          PROJECT_ROOT: .
          IGNORE_LIST: "scripts"
      - name: Set Dynamic Matrix
        id: setmatrix
        shell: bash
        run: |
          echo "## Project List"
          cat project_list.txt
          matrixStringifiedObject="$(cat project_list.txt | ./scripts/generate_matrix.sh)"
          echo "## Matrix Object"
          echo "$matrixStringifiedObject"
          echo "matrix=$matrixStringifiedObject" >> $GITHUB_OUTPUT
        env:
          PROJECT_ROOT: .
      - name: Get Latest Github Relaase
        id: get_latest_release
        run: |
          latest_release=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          echo "Latest release is $latest_release"
          echo "result=$latest_release" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      matrix: ${{ steps.setmatrix.outputs.matrix }}
      latest-release: ${{ steps.get_latest_release.outputs.result }}
  unit-tests:
    name: Unit Tests
    needs: [initialize]
    if: github.event_name != 'release'
    strategy:
      matrix: ${{ fromJson(needs.initialize.outputs.matrix) }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22.x'
      - name: Install Dependencies
        run: |
          if [ -f "package.json" ]; then
            npm install
          fi
        working-directory: ${{ matrix.project}}
      - name: Run Unit Tests
        run: |
          if [ -f "package.json" ] && [ "$(jq -r '.scripts["test"]' package.json)" != "null" ]; then
            npm run test
          fi
        working-directory: ${{ matrix.project}}

  feature-tests:
    name: Feature Tests
    needs: [initialize]
    if: github.event_name != 'release'
    strategy:
      matrix: ${{ fromJson(needs.initialize.outputs.matrix) }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22.x'
      - name: Install Dependencies
        run: |
          if [ -f "package.json" ]; then
            npm install
          fi
        working-directory: ${{ matrix.project}}
      - name: Run Feature Tests
        run: |
          if [ -f "package.json" ] && [ "$(jq -r '.scripts["test:e2e"]' package.json)" != "null" ]; then
            npm run test:e2e
          fi
        working-directory: ${{ matrix.project}}
  deploy-to-testing:
    name: Ready for testing
    needs: [unit-tests,feature-tests,initialize]
    environment: testing
    # if: |
    #   github.event_name == 'push' &&
    #   github.ref == 'refs/heads/main'
    strategy:
      matrix: ${{ fromJson(needs.initialize.outputs.matrix) }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22.x'
      - name: Install Dependencies
        run: |
          if [ -f "package.json" ]; then
            npm install
          fi
        working-directory: ${{ matrix.project }}
      - name: Deploy
        run: |
          if [ -f "package.json" ] && [ "$(jq -r '.scripts["deploy:testing"]' package.json)" != "null" ]; then
            npm run deploy:testing
          fi
  tag-predicted-release:
    needs: [deploy-to-testing,initialize]
    uses: VirdocsSoftware/github-actions/.github/workflows/tag-tickets-with-release.yml@main
    with:
      target-branch: refs/tags/${{ needs.initialize.outputs.latest-release }}
      jira-domain: ${{ vars.JIRA_DOMAIN }}
      jira-username: ${{ vars.JIRA_USERNAME }}
      is-release: true
    secrets:
      jira-api-token: ${{ secrets.JIRA_API_TOKEN }}
      llm-api-token: ${{ secrets.LLM_TOKEN }}
  deploy-to-production:
    name: Ready for production
    needs: [initialize]
    environment: production
    if: |
      github.event_name == 'release' &&
      startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix: ${{ fromJson(needs.initialize.outputs.matrix) }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22.x'
      - name: Install Dependencies
        run: |
          if [ -f "package.json" ]; then
            npm install
          fi
        working-directory: ${{ matrix.project }}
      - name: Deploy
        run: |
          if [ -f "package.json" ] && [ "$(jq -r '.scripts["deploy:production"]' package.json)" != "null" ]; then
            npm run deploy:production
          fi